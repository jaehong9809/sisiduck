pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('docker-registry-credentials')
        ENV_FILE = credentials('env-file-credentials')
        JAVA_HOME = '/opt/java/openjdk'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                dir('BE') {
                    withCredentials([
                    file(credentialsId: 'env-file-credentials', variable: 'ENV_FILE'),
                    ]) {
                        sh '''
                          mkdir -p src/main/resources
                          chmod -R 700 src/main/resources
                          cp $ENV_FILE_ENT src/main/resources/application.yml
                          cp $ENV_FILE src/main/resources/application-prod.yml
                          cp $ENV_FILE src/main/resources/application-oauth.yml
                        '''
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('BE') {
                    sh '''
                        chmod +x ./gradlew
                        ./gradlew clean build
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('BE') {
                    script {
                        def dockerImage = "${DOCKER_REGISTRY_USR}/backend:${BUILD_NUMBER}"
                        withCredentials([usernamePassword(
                            credentialsId: 'docker-registry-credentials',
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )]) {
                        def imageTag = "${DOCKER_USER}/backend:${BUILD_NUMBER}"
                        sh """
                            echo '$DOCKER_PASS' | docker login -u '$DOCKER_USER' --password-stdin
                            docker build -t ${imageTag} -f finafanBE/Dockerfile .
                            docker push ${imageTag}

                        """
                    }
                }
            }
        }
      }

        stage('Deploy') {
            steps {
                dir('BE') {
                    withCredentials([
                    file(credentialsId: 'env-file-credentials', variable: 'ENV_FILE'),
                    ]) {
                        sh """
                            cp \$ENV_FILE finafanBE/.env
                            chmod 644 .env

                            cd finafanBE
                            docker-compose -f docker-compose.yml down

                            # 새로운 이미지로 모든 서비스 시작
                            BUILD_NUMBER=${BUILD_NUMBER} docker-compose -f docker-compose.yml up -d

                            # 각 백엔드 서비스의 상태 확인
                            docker-compose ps backend1
                            docker-compose ps backend2
                            docker-compose ps backend3
                        """
                    }
                }
            }
        }

        stage('Docker Test') {
            steps {
                sh '''
                    docker --version
                    docker ps
                '''
            }
        }
    }

    post {
        always {
            dir('BE') {
                sh '''
                    rm -f src/main/resources/application-prod.yml
                    rm -f src/main/resources/application-oauth.yml
                    rm -f docker/.env

                    docker container prune -f
                    docker image prune -f
                '''
            }
        }
    }
}
