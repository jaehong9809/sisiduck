services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Seoul
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  spring-app1:
    env_file:
      - .env
#    image: ${DOCKER_USER}/backend:${BUILD_NUMBER}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-app1
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: "local,redis-sentinel"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SERVER_PORT: "8084"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,prometheus,metrics"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"
    volumes:
      - ./logs/app1:/app/logs
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  spring-app2:
    env_file:
      - .env
    #    image: ${DOCKER_USER}/backend:${BUILD_NUMBER}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-app2
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: "local,redis-sentinel"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SERVER_PORT: "8082"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,prometheus,metrics"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"
    volumes:
      - ./logs/app2:/app/logs
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  spring-app3:
    env_file:
      - .env
    #    image: ${DOCKER_USER}/backend:${BUILD_NUMBER}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-app3
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: "local,redis-sentinel"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SERVER_PORT: "8083"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,prometheus,metrics"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"
    volumes:
      - ./logs/app3:/app/logs
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-network
    depends_on:
      - spring-app1
      - spring-app2
      - spring-app3

  redis-server:
    image: redis:6.2
    container_name: redis-server
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - app-network

  redis-slave-1:
    image: redis:6.2
    container_name: redis-slave-1
    ports:
      - "6380:6379"
    command: redis-server --slaveof redis-server 6379 --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    networks:
      - app-network

  redis-slave-2:
    image: redis:6.2
    container_name: redis-slave-2
    ports:
      - "6381:6379"
    command: redis-server --slaveof redis-server 6379 --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    networks:
      - app-network

  redis-sentinel-1:
    image: redis:6.2
    container_name: redis-sentinel-1
    restart: always
    ports:
      - "26379:26379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: |
      bash -c "mkdir -p /etc/redis &&
      echo 'port 26379
      sentinel monitor mymaster redis-server 6379 2
      sentinel down-after-milliseconds mymaster 5000
      sentinel failover-timeout mymaster 60000
      sentinel parallel-syncs mymaster 1
      sentinel auth-pass mymaster '${REDIS_PASSWORD} > /etc/redis/sentinel.conf &&
      redis-sentinel /etc/redis/sentinel.conf"
    networks:
      - app-network

  redis-sentinel-2:
    image: redis:6.2
    container_name: redis-sentinel-2
    restart: always
    ports:
      - "26380:26379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: |
      bash -c "mkdir -p /etc/redis &&
      echo 'port 26379
      sentinel monitor mymaster redis-server 6379 2
      sentinel down-after-milliseconds mymaster 5000
      sentinel failover-timeout mymaster 60000
      sentinel parallel-syncs mymaster 1
      sentinel auth-pass mymaster '${REDIS_PASSWORD} > /etc/redis/sentinel.conf &&
      redis-sentinel /etc/redis/sentinel.conf"
    networks:
      - app-network

  redis-sentinel-3:
    image: redis:6.2
    container_name: redis-sentinel-3
    restart: always
    ports:
      - "26381:26379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: |
      bash -c "mkdir -p /etc/redis &&
      echo 'port 26379
      sentinel monitor mymaster redis-server 6379 2
      sentinel down-after-milliseconds mymaster 5000
      sentinel failover-timeout mymaster 60000
      sentinel parallel-syncs mymaster 1
      sentinel auth-pass mymaster '${REDIS_PASSWORD} > /etc/redis/sentinel.conf &&
      redis-sentinel /etc/redis/sentinel.conf"
    networks:
      - app-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    depends_on:
      - prometheus

  # ELK Stack for log centralization
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - app-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - app-network
    depends_on:
      - elasticsearch

  ngrinder-controller:
    image: ngrinder/controller:latest
    container_name: ngrinder-controller
    ports:
      - "8080:80"
      - "16001:16001"
      - "12000-12009:12000-12009"
    volumes:
      - ngrinder-controller-home:/opt/ngrinder-controller
    networks:
      - app-network

  ngrinder-agent:
    image: ngrinder/agent:latest
    container_name: ngrinder-agent
    restart: always
    environment:
      - CONTROLLER_HOST=ngrinder-controller
      - CONTROLLER_PORT=16001
      - AGENT_JAVA_OPT=-Xmx1024m -Xms512m
    networks:
      - app-network
    depends_on:
      - ngrinder-controller

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  ngrinder-controller-home: