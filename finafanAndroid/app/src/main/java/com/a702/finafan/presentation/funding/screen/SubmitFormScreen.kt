package com.a702.finafan.presentation.funding.screen

import android.net.Uri
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.a702.finafan.common.ui.component.CommonBackTopBar
import com.a702.finafan.common.ui.component.CustomGradBottomButton
import com.a702.finafan.common.ui.component.DialogLayout
import com.a702.finafan.common.ui.component.LiveTextArea
import com.a702.finafan.common.ui.component.MultiImageField
import com.a702.finafan.common.ui.theme.CustomTypography.bodySmall
import com.a702.finafan.common.ui.theme.CustomTypography.displaySmall
import com.a702.finafan.common.ui.theme.MainWhite
import com.a702.finafan.common.ui.theme.TermBoxGray
import com.a702.finafan.common.ui.theme.Typography
import com.a702.finafan.common.utils.StringUtil
import com.a702.finafan.presentation.funding.component.FundingInfoHeader
import com.a702.finafan.presentation.funding.component.MenuDescription
import com.a702.finafan.presentation.funding.component.MenuTitle
import com.a702.finafan.presentation.funding.component.SpendingListSection
import com.a702.finafan.presentation.funding.component.SuccessBadge
import com.a702.finafan.presentation.funding.viewmodel.FundingDetailViewModel
import com.a702.finafan.presentation.funding.viewmodel.SubmitFormViewModel

@Composable
fun SubmitFormScreen(
    navController: NavController,
    fundingDetailViewModel: FundingDetailViewModel
) {
    val submitFormViewModel: SubmitFormViewModel = hiltViewModel()

    val fundingState by fundingDetailViewModel.uiState.collectAsState()
    val submitFormState by submitFormViewModel.submitFormState.collectAsState()

    val uploadedImages = remember { mutableStateListOf<Uri>() }
    val spendingItems = remember { mutableStateListOf<Pair<String, String>>() }
    val description = remember { mutableStateOf("") }

    val showDialog = remember { mutableStateOf(false) }

    val spendingTotal = spendingItems.sumOf { it.second.replace(",", "").replace("Ïõê", "").toIntOrNull() ?: 0 }
    val totalAmount = fundingState.funding?.currentAmount ?: 0L

    Scaffold(
        topBar = {
            CommonBackTopBar(
                text = "ÏÑ±Í≥µ Î™®Í∏à Ï¢ÖÎ£åÌïòÍ∏∞"
            )
        },
        bottomBar = {
            CustomGradBottomButton(
                onClick = {
                    // TODO: API Ìò∏Ï∂ú, dialog Î≥¥Ïó¨Ï£ºÍ≥† Î™®Í∏à ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
                    showDialog.value = true
                },
                text = "Ï¢ÖÎ£å",
                isEnabled = spendingTotal >= totalAmount,
                gradientColor = fundingState.colorSet
            )
        },
        containerColor = MainWhite
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(horizontal = 16.dp, vertical = 8.dp)
                .fillMaxWidth()
                .verticalScroll(rememberScrollState())
        ) {
            fundingState.funding?.let { FundingInfoHeader(funding = it, showRemainingAmount = false, showDetailButton = false) }

            SuccessBadge(size = 120.dp, modifier = Modifier.align(Alignment.CenterHorizontally)
                .padding(20.dp))

            MenuTitle(content = "Ï¶ùÎπô ÏÑúÎ•ò Ï≤®Î∂Ä", modifier = Modifier.padding(vertical = 10.dp))
            MenuDescription(content = "ÏßÄÏ∂úÌïú Í∏àÏï°Ïóê ÎåÄÌï¥ ÏÇ¨ÏßÑ ÎòêÎäî Ïä§ÌÅ¨Î¶∞ÏÉ∑ÏúºÎ°ú Ï¶ùÎπôÌï¥ Ï£ºÏÑ∏Ïöî. " +
                    "Ïòà) ÏòÅÏàòÏ¶ù, ÌòÑÏû• ÏÇ¨ÏßÑ")

            MultiImageField(
                label = "",
                selectImages = uploadedImages,
                onImagesChanged = { updatedList ->
                    submitFormViewModel.updateImageList(updatedList) // ÌòπÏùÄ ÏÉÅÌÉú Ï†ÄÏû• Îì±
                }
            )
            Spacer(Modifier.height(30.dp))

            MenuTitle(content = "ÏßÄÏ∂ú ÎÇ¥Ïó≠", modifier = Modifier.padding(vertical = 10.dp))
            MenuDescription(content = "Ï¶ùÎπôÌïú Í∏àÏï°Í≥º Ï∂îÌõÑÏóê ÏßÄÏ∂úÌï† ÎÇ¥Ïó≠ÏùÑ ÏûêÏÑ∏ÌïòÍ≤å Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî.")
            SpendingListSection(
                items = spendingItems,
                onItemsChanged = {
                    spendingItems.clear()
                    spendingItems.addAll(it)
                    submitFormViewModel.updateUsageList(it)
                },
                modifier = Modifier.padding(top = 20.dp)
            )

            if (spendingTotal < totalAmount) {
                val diff = totalAmount - spendingTotal
                Text(
                    text = StringUtil.formatCurrency(diff) + "ÎßåÌÅº Îçî Ï†ïÏÇ∞Ìï¥ Ï£ºÏÑ∏Ïöî!",
                    color = fundingState.colorSet[1],
                    style = Typography.displayLarge,
                    modifier = Modifier.align(Alignment.CenterHorizontally)
                        .padding(bottom = 20.dp)
                )
            }


            Box(modifier = Modifier
                .fillMaxWidth()
                .background(color = TermBoxGray.copy(alpha = 0.5f),
                    shape = RoundedCornerShape(12.dp)
                )
                .padding(horizontal = 16.dp, vertical = 12.dp)
            ) {
                Column(
                    verticalArrangement = Arrangement.spacedBy(5.dp),
                    modifier = Modifier.padding(5.dp),
                ) {
                    Text("üíÅ Ïú†ÏùòÏÇ¨Ìï≠", style = displaySmall)
                    Text("‚Ä¢ Ï†ÑÏ≤¥ Î™®Í∏àÏï° Ïù¥ÏÉÅ Í∏∞Ïû¨Ìï¥Ïïº Ï¢ÖÎ£å Î≤ÑÌäºÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ Ï†ïÏÉÅ Ï¢ÖÎ£åÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§.\n" +
                            "‚Ä¢ ÏûëÏÑ±Ìïú ÎÇ¥Ïö©ÏùÄ ÏûêÎèô Ï†ÄÏû•ÎêòÎØÄÎ°ú, Ï¢ÖÎ£å Ï†ÑÍπåÏßÄ ÎÇ¥Ïö©ÏùÑ ÏûêÏú†Î°≠Í≤å Ï∂îÍ∞Ä Î∞è ÏÇ≠Ï†ú Ìï¥Ï£ºÏÑ∏Ïöî.",
                        style = bodySmall)
                }
            }

            Spacer(Modifier.height(30.dp))

            MenuTitle(content = "ÏïàÎÇ¥ ÏÇ¨Ìï≠", modifier = Modifier.padding(vertical = 10.dp))
            MenuDescription(content = "Ï∞∏Í∞ÄÏûêÎì§ÏóêÍ≤å Ï†ÑÎã¨Ìï† ÏÇ¨Ìï≠Ïù¥ ÏûàÎã§Î©¥ ÏÉÅÏÑ∏ÌïòÍ≤å Ï†ÅÏñ¥ Ï£ºÏÑ∏Ïöî.",)
            LiveTextArea(
                placeholder = "ÎÇ¥Ïö©",
                description = description,
                onValueChange = {
                    description.value = it
                    submitFormViewModel.updateContent(it)
                },
                modifier = Modifier.padding(vertical = 10.dp)
            )
        }
        DialogLayout(
            showDialog = showDialog,
            confirmBtnText = "ÌôïÏù∏",
            onClickConfirm = {
                showDialog.value = false
                navController.popBackStack()
            }
        ) {
            Spacer(Modifier.height(20.dp))
            Text("Î™®Í∏àÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§!", style = Typography.titleLarge)
        }
    }
}
